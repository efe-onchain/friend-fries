schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

type Bounty {
  id: Bytes!
  bountyNumber: BigInt!
  blockTimestamp: BigInt!
  title: String!
  description: String!
  image: String!
  individualReward: BigInt!
  deadline: BigInt!
  maxParticipants: BigInt!
  numParticipants: BigInt!
  rewarded: BigInt!
  status: Int8!
  owner: Bytes!
  participants(skip: Int = 0, first: Int = 100, orderBy: BountyParticipant_orderBy, orderDirection: OrderDirection, where: BountyParticipant_filter): [BountyParticipant!]!
}

type BountyParticipant {
  id: Bytes!
  bounty: Bounty!
  participant: Participant!
  rewarded: BigInt!
}

input BountyParticipant_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  bounty: String
  bounty_not: String
  bounty_gt: String
  bounty_lt: String
  bounty_gte: String
  bounty_lte: String
  bounty_in: [String!]
  bounty_not_in: [String!]
  bounty_contains: String
  bounty_contains_nocase: String
  bounty_not_contains: String
  bounty_not_contains_nocase: String
  bounty_starts_with: String
  bounty_starts_with_nocase: String
  bounty_not_starts_with: String
  bounty_not_starts_with_nocase: String
  bounty_ends_with: String
  bounty_ends_with_nocase: String
  bounty_not_ends_with: String
  bounty_not_ends_with_nocase: String
  bounty_: Bounty_filter
  participant: String
  participant_not: String
  participant_gt: String
  participant_lt: String
  participant_gte: String
  participant_lte: String
  participant_in: [String!]
  participant_not_in: [String!]
  participant_contains: String
  participant_contains_nocase: String
  participant_not_contains: String
  participant_not_contains_nocase: String
  participant_starts_with: String
  participant_starts_with_nocase: String
  participant_not_starts_with: String
  participant_not_starts_with_nocase: String
  participant_ends_with: String
  participant_ends_with_nocase: String
  participant_not_ends_with: String
  participant_not_ends_with_nocase: String
  participant_: Participant_filter
  rewarded: BigInt
  rewarded_not: BigInt
  rewarded_gt: BigInt
  rewarded_lt: BigInt
  rewarded_gte: BigInt
  rewarded_lte: BigInt
  rewarded_in: [BigInt!]
  rewarded_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BountyParticipant_filter]
  or: [BountyParticipant_filter]
}

enum BountyParticipant_orderBy {
  id
  bounty
  bounty__id
  bounty__bountyNumber
  bounty__blockTimestamp
  bounty__title
  bounty__description
  bounty__image
  bounty__individualReward
  bounty__deadline
  bounty__maxParticipants
  bounty__numParticipants
  bounty__rewarded
  bounty__status
  bounty__owner
  participant
  participant__id
  participant__totalRewards
  rewarded
}

input Bounty_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  bountyNumber: BigInt
  bountyNumber_not: BigInt
  bountyNumber_gt: BigInt
  bountyNumber_lt: BigInt
  bountyNumber_gte: BigInt
  bountyNumber_lte: BigInt
  bountyNumber_in: [BigInt!]
  bountyNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  image: String
  image_not: String
  image_gt: String
  image_lt: String
  image_gte: String
  image_lte: String
  image_in: [String!]
  image_not_in: [String!]
  image_contains: String
  image_contains_nocase: String
  image_not_contains: String
  image_not_contains_nocase: String
  image_starts_with: String
  image_starts_with_nocase: String
  image_not_starts_with: String
  image_not_starts_with_nocase: String
  image_ends_with: String
  image_ends_with_nocase: String
  image_not_ends_with: String
  image_not_ends_with_nocase: String
  individualReward: BigInt
  individualReward_not: BigInt
  individualReward_gt: BigInt
  individualReward_lt: BigInt
  individualReward_gte: BigInt
  individualReward_lte: BigInt
  individualReward_in: [BigInt!]
  individualReward_not_in: [BigInt!]
  deadline: BigInt
  deadline_not: BigInt
  deadline_gt: BigInt
  deadline_lt: BigInt
  deadline_gte: BigInt
  deadline_lte: BigInt
  deadline_in: [BigInt!]
  deadline_not_in: [BigInt!]
  maxParticipants: BigInt
  maxParticipants_not: BigInt
  maxParticipants_gt: BigInt
  maxParticipants_lt: BigInt
  maxParticipants_gte: BigInt
  maxParticipants_lte: BigInt
  maxParticipants_in: [BigInt!]
  maxParticipants_not_in: [BigInt!]
  numParticipants: BigInt
  numParticipants_not: BigInt
  numParticipants_gt: BigInt
  numParticipants_lt: BigInt
  numParticipants_gte: BigInt
  numParticipants_lte: BigInt
  numParticipants_in: [BigInt!]
  numParticipants_not_in: [BigInt!]
  rewarded: BigInt
  rewarded_not: BigInt
  rewarded_gt: BigInt
  rewarded_lt: BigInt
  rewarded_gte: BigInt
  rewarded_lte: BigInt
  rewarded_in: [BigInt!]
  rewarded_not_in: [BigInt!]
  status: Int8
  status_not: Int8
  status_gt: Int8
  status_lt: Int8
  status_gte: Int8
  status_lte: Int8
  status_in: [Int8!]
  status_not_in: [Int8!]
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  participants_: BountyParticipant_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Bounty_filter]
  or: [Bounty_filter]
}

enum Bounty_orderBy {
  id
  bountyNumber
  blockTimestamp
  title
  description
  image
  individualReward
  deadline
  maxParticipants
  numParticipants
  rewarded
  status
  owner
  participants
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Participant {
  id: Bytes!
  participated(skip: Int = 0, first: Int = 100, orderBy: BountyParticipant_orderBy, orderDirection: OrderDirection, where: BountyParticipant_filter): [BountyParticipant!]!
  totalRewards: BigInt!
}

input Participant_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  participated_: BountyParticipant_filter
  totalRewards: BigInt
  totalRewards_not: BigInt
  totalRewards_gt: BigInt
  totalRewards_lt: BigInt
  totalRewards_gte: BigInt
  totalRewards_lte: BigInt
  totalRewards_in: [BigInt!]
  totalRewards_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Participant_filter]
  or: [Participant_filter]
}

enum Participant_orderBy {
  id
  participated
  totalRewards
}

type Query {
  bounty(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bounty
  bounties(
    skip: Int = 0
    first: Int = 100
    orderBy: Bounty_orderBy
    orderDirection: OrderDirection
    where: Bounty_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bounty!]!
  participant(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Participant
  participants(
    skip: Int = 0
    first: Int = 100
    orderBy: Participant_orderBy
    orderDirection: OrderDirection
    where: Participant_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Participant!]!
  bountyParticipant(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BountyParticipant
  bountyParticipants(
    skip: Int = 0
    first: Int = 100
    orderBy: BountyParticipant_orderBy
    orderDirection: OrderDirection
    where: BountyParticipant_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BountyParticipant!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  bounty(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bounty
  bounties(
    skip: Int = 0
    first: Int = 100
    orderBy: Bounty_orderBy
    orderDirection: OrderDirection
    where: Bounty_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bounty!]!
  participant(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Participant
  participants(
    skip: Int = 0
    first: Int = 100
    orderBy: Participant_orderBy
    orderDirection: OrderDirection
    where: Participant_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Participant!]!
  bountyParticipant(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BountyParticipant
  bountyParticipants(
    skip: Int = 0
    first: Int = 100
    orderBy: BountyParticipant_orderBy
    orderDirection: OrderDirection
    where: BountyParticipant_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BountyParticipant!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}